searchState.loadedDescShard("sosa", 0, "The stochastic simulation algorithm (SSA) with a …\nAbsorbing state has been reached\nPerform an iteration of the SSA.\nThe current state of a Markov process.\nThe maximal number of individual has been reached.\nThe maximal number of iterations has been reached.\nThe maximal timestep has been reached\nNumber of individuals present in the system.\nThe next reaction sampled by the SSA.\nNo individual left, all lineages have died out.\nThe rate of a reaction is the average number of occurrence …\nWhether to stop or continue the simulation.\nA simulation is stopped whether one of those conditions …\nUpdates the process by stepping one step forward in the …\nThe event corresponding to the next iteration found by the …\nGenerates a random waiting time using the exponential …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind the next reaction in the system according to a …\nThe number of individuals for all reactions.\nThe main loop running one realisation of a stochastic …\nThe relative time at which this next reaction took place.\nOnce the process has been updated by …\nWrite vector of float into new file with a precision of 4 …")