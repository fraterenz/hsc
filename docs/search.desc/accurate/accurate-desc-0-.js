searchState.loadedDescShard("accurate", 0, "A collection of (more or less) accurate floating point …\nAlgorithms for dot product\nAlgorithms for summation\nIncludes all traits of this crate\nCommon infrastructure\n<code>DotK</code> with two cascaded accumulators\n<code>DotK</code> with three cascaded accumulators\n<code>DotK</code> with four cascaded accumulators\n<code>DotK</code> with five cascaded accumulators\n<code>DotK</code> with six cascaded accumulators\n<code>DotK</code> with seven cascaded accumulators\n<code>DotK</code> with eight cascaded accumulators\n<code>DotK</code> with nine cascaded accumulators\nAdapts a <code>ParallelDotAccumulator</code> into a <code>Consumer</code>\nAdapts a <code>DotAccumulator</code> into a <code>Folder</code>\nCalculates a dot product using both product transformation …\nNaive floating point dot product\nCalculates the dot product using product transformation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDot product traits\nAccumulates terms of a dot product\nCalculates the dot product of the items of an iterator\nA <code>DotAccumulator</code> that can be used in parallel computations\nCalculates the dot product of an iterator, possibly in …\nAbsorb the items of an iterator into the accumulator\nThe dot product of all terms accumulated so far\nCalculates the dot product of the items of an iterator\nTurns an accumulator into a consumer\nCalculate the dot product of an iterator, possibly in …\nInitial value for an accumulator\nNaive floating point summation\nCalculates a sum using separate accumulators for each …\n<code>SumK</code> with two cascaded accumulators\n<code>SumK</code> with three cascaded accumulators\n<code>SumK</code> with four cascaded accumulators\n<code>SumK</code> with five cascaded accumulators\n<code>SumK</code> with six cascaded accumulators\n<code>SumK</code> with seven cascaded accumulators\n<code>SumK</code> with eight cascaded accumulators\n<code>SumK</code> with nine cascaded accumulators\nAdapts a <code>ParallelSumAccumulator</code> into a <code>Consumer</code>\nAdapts a <code>SumAccumulator</code> into a <code>Folder</code>\nCalculates a sum using cascaded accumulators for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculates the correctly rounded sum of numbers in a slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSummation traits\nCalculates the correctly rounded sum of numbers in a slice\nA <code>SumAccumulator</code> that can be used in parallel computations\nSums the items of an iterator, possibly in parallel\nAccumulates terms of a sum\nSums the items of an iterator\nAbsorb the items of an iterator into the accumulator\nTurns an accumulator into a consumer\nSums the items of an iterator, possibly in parallel\nThe sum of all terms accumulated so far\nSums the items of an iterator\nInitial value for an accumulator\nAccumulates terms of a dot product\nCalculates the dot product of the items of an iterator\nDescribes the layout of a floating-point number\nHalf a unit in the last place (ULP)\nCalculates the correctly rounded sum of numbers in a slice\nA <code>DotAccumulator</code> that can be used in parallel computations\nCalculates the dot product of an iterator, possibly in …\nA <code>SumAccumulator</code> that can be used in parallel computations\nSums the items of an iterator, possibly in parallel\nExtract the raw exponent of a floating-point number\nCorrectly rounded sum of three non-overlapping numbers\nSplit a floating-point number\nAccumulates terms of a sum\nSums the items of an iterator\nProduct transformation\nSum transformation\nAbsorb the items of an iterator into the accumulator\nAbsorb the items of an iterator into the accumulator\nThe number format’s base\nThe base raised to the power of the exponent`s length\nThe base raised to the power of half the mantissa`s length\nThe dot product of all terms accumulated so far\nCalculates the dot product of the items of an iterator\nThe length of the number format’s exponent field\nCalculate half a ULP of a number\nCheck whether something has the form of half a ULP\nTurns an accumulator into a consumer\nTurns an accumulator into a consumer\nCalculate the dot product of an iterator, possibly in …\nSums the items of an iterator, possibly in parallel\nThe raw bits of the exponent\nThe length of the number format’s significand field\nSplit a floating-point number\nSplit factor used in the algorithm\nThe sum of all terms accumulated so far\nSums the items of an iterator\nInitial value for an accumulator\nInitial value for an accumulator\nReduce two parallel results using <code>Add</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCorrectly rounded sum of three non-overlapping numbers\nCommon traits\nProduct transformation\nSum transformation\nDescribes the layout of a floating-point number\nHalf a unit in the last place (ULP)\nExtract the raw exponent of a floating-point number\nCorrectly rounded sum of three non-overlapping numbers\nSplit a floating-point number\nProduct transformation\nSum transformation\nThe number format’s base\nThe base raised to the power of the exponent`s length\nThe base raised to the power of half the mantissa`s length\nThe length of the number format’s exponent field\nCalculate half a ULP of a number\nCheck whether something has the form of half a ULP\nThe raw bits of the exponent\nThe length of the number format’s significand field\nSplit a floating-point number\nSplit factor used in the algorithm")