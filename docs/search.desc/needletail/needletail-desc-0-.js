searchState.loadedDescShard("needletail", 0, "Needletail is a crate to quickly and easily parse FASTA …\nCompact binary representations of nucleic acid kmers\nThe errors needletail can return; only when parsing …\nFunctions for splitting sequences into fixed-width moving …\nHandles all the FASTA/FASTQ parsing\nGeneric functions for working with (primarily nucleic …\nReturn the lexigraphically lowest of the BitKmer and its …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFind the lexicographically lowest substring of a given …\nReverse complement a BitKmer (reverses the sequence and …\nThe file appears to be empty\nRepresents where we were in a file when an error occurred.\nThe separator line in a FASTQ file is not valid (no <code>+</code>)\nInvalid start byte of record encountered (expected <code>@</code> in …\nAn error happened during file/stream input/output\nThe only error type that needletail returns\nThe type of error that occured during file parsing\nSequence and quality lengths are not equal (in a FASTQ …\nTruncated record found\nThe file didn’t start with <code>@</code> or <code>&gt;</code> and we didn’t know …\nThe format of the file we were parsing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of record if available\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of error that occurred\nLine number where the error occurred (starting with 1)\nA description of what went wrong\nPosition within file\nA kmer-izer for a nucleotide acid sequences to return …\nGeneric moving window iterator over sequences to return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new kmer-izer for a nucleotide/amino acid …\nCreates a new iterator.\nParser for FASTA files. Only use this directly if you know …\nParser for FASTQ files. Only use this directly if you know …\nThe main trait, iterator-like, that the FASTA and FASTQ …\nFASTA or FASTQ?\nWhether it uses \\r\\n or only \\n\nA FASTA or FASTQ record\nReturns the full sequence, including line endings. This …\nReturns the format of the record\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a reader from a file path.\nCreates a reader from a file path.\nReturns the id of the record\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the current stream uses Windows or Unix …\nWhich line ending is this record using?\nMask tabs in header lines to <code>|</code>s\nConvert bad UTF8 characters into �s\nCreates a new reader with the default buffer size of 64 KiB\nCreates a new reader with the default buffer size of 64 KiB\nGets the next record in the stream. This imitates the …\nReturn the number of bases in the sequence, computed …\nThe main entry point of needletail if you’re reading …\nThe main entry point of needletail if you’re reading …\nThe main entry point of needletail if you’re reading …\nReturns the current line/byte in the stream we are reading …\nReturns the quality line if there is one. Always <code>None</code> for …\nReturns the raw sequence of the record. Only matters for …\nReturns the cleaned up sequence of the record. For FASTQ …\nReturn the line number in the file of the start of the …\nCreates a new reader with a given buffer capacity. The …\nCreates a new reader with a given buffer capacity. The …\nWrite record back to a <code>Write</code> instance. By default it will …\nWrite a FASTA record\n[⚠️Unstable] A trait to wrap over sequence data that …\nA generic FASTX record that also abstracts over several …\nReturn an iterator that returns valid kmers in 4-bit form\nTaking in a sequence string, return the canonical form of …\n[Nucleic Acids] Returns an iterator over the sequence that …\nReturns the complementary base for a given IUPAC base code.\nReturns an iterator that returns a sliding window of …\nFind the lexigraphically smallest substring of <code>seq</code> of …\nTransform a nucleic acid sequence into its “normalized”…\n[Nucleic Acids] Normalizes the sequence. See documentation …\nGiven a SeqRecord and a quality cutoff, mask out …\nReturns the reverse complement of a sequence. Biologically …\nRemove newlines from the sequence; this handles <code>\\r</code>, <code>\\n</code>, …")