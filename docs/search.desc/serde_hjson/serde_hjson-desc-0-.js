searchState.loadedDescShard("serde_hjson", 0, "What is Hjson?\nJSON Builders\nHjson Deserialization\nJSON Errors\nCreate a function to forward a specific serialize call to …\nHjson Serialization\nHjson Value\nThis structure provides a simple interface for …\nThis structure provides a simple interface for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a key-value pair into the object.\nCreates and passes an <code>ObjectBuilder</code> into a closure, then …\nCreates and passes an <code>ObjectBuilder</code> into a closure, then …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct an <code>ObjectBuilder</code>.\nConstruct an <code>ObjectBuilder</code>.\nInsert a value into the array.\nCreates and passes an <code>ArrayBuilder</code> into a closure, then …\nCreates and passes an <code>ArrayBuilder</code> into a closure, then …\nReturn the constructed <code>Value</code>.\nReturn the constructed <code>Value</code>.\nA structure that deserializes Hjson into Rust values.\nIterator that deserializes a stream into multiple Hjson …\nParses a newtype struct as the underlying value.\nParses a <code>null</code> as a None, and any other values as a …\nThe <code>Deserializer::end</code> method should be called after a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a Hjson value from an iterator over an iterator …\nDecodes a Hjson value from a <code>std::io::Read</code>.\nDecodes a Hjson value from a byte slice <code>&amp;[u8]</code>.\nDecodes a Hjson value from a <code>&amp;str</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates the Hjson parser from an <code>std::iter::Iterator</code>.\nReturns an <code>Iterator</code> of decoded Hjson values from an …\nCreates the Hjson parser from an <code>std::iter::Iterator</code>.\nCatchall for syntax error messages\nEOF while parsing a list.\nEOF while parsing an object.\nEOF while parsing a string.\nEOF while parsing a JSON value.\nContains the error value\nThis type represents all possible errors that can occur …\nThe errors that can arise while parsing a JSON stream.\nExpected this character to be a <code>&#39;:&#39;</code>.\nExpected this character to be either a <code>&#39;,&#39;</code> or a <code>]</code>.\nExpected this character to be either a <code>&#39;,&#39;</code> or a <code>}</code>.\nExpected to parse either a <code>true</code>, <code>false</code>, or a <code>null</code>.\nExpected this character to start a JSON value.\nSome UTF8 error occurred while serializing or …\nInvalid hex escape code.\nInvalid length\nInvalid number.\nIncorrect type from value\nInvalid unicode code point.\nIncorrect value\nSome IO error occurred when serializing or deserializing a …\nObject key is not a string.\nLone leading surrogate in hex escape.\nStruct is missing a field.\nContains the success value\nFound a punctuator character when expecting a quoteless …\nHelper alias for <code>Result</code> objects that return a JSON <code>Error</code>.\nThe JSON value had some syntatic error.\nJSON has non-whitespace trailing characters after the …\nUnexpected end of hex excape.\nUnknown field in struct.\nUnknown variant in an enum.\nRaised when there is general error when deserializing a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis trait abstracts away serializing the JSON control …\nA structure for serializing Rust values into Hjson.\nCalled when serializing a ‘}’ or ‘]’.\nCalled when serializing a ‘:’.\nCalled when serializing a ‘,’.\nSerializes and escapes a <code>&amp;[u8]</code> into a Hjson string.\nSerializes and escapes a <code>&amp;str</code> into a Hjson key.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnwrap the <code>Writer</code> from the <code>Serializer</code>.\nSerializes and escapes a <code>&amp;str</code> into a multiline Hjson …\nCreates a new Hjson serializer.\nNewline with indent.\nCalled when serializing a ‘{’ or ‘[’.\nSerializes and escapes a <code>&amp;str</code> into a Hjson string.\nSerialize newtypes without an object wrapper.\nStart a value.\nEncode the specified struct into a Hjson <code>String</code> buffer.\nEncode the specified struct into a Hjson <code>[u8]</code> buffer.\nEncode the specified struct into a Hjson <code>[u8]</code> writer.\nCreates a new Hjson visitor whose output will be written …\nRepresents a JSON array\nRepresents a JSON Boolean\nCreates a <code>serde::Deserializer</code> from a <code>Value</code> object.\nRepresents a JSON floating point number\nRepresents a JSON signed integer\nRepresents a key/value type.\nRepresents the <code>IntoIter</code> type.\nRepresents a JSON null value\nRepresents a JSON object\nCreate a <code>serde::Serializer</code> that serializes a <code>Serialize</code>e …\nRepresents a JSON string\nA trait for converting values to Hjson\nRepresents a JSON unsigned integer\nRepresents a Hjson/JSON value\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, return or cast it to a f64. …\nIf the <code>Value</code> is a number, return or cast it to a i64. …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is a number, return or cast it to a u64. …\nIf the <code>Value</code> is an Object, returns the value associated …\nAttempts to get a nested Value Object for each key in <code>keys</code>.\nSerializes a Hjson value into a string\nSerializes a Hjson value into a string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShortcut function to decode a Hjson <code>Value</code> into a <code>T</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a f64. Returns false …\nReturns true if the <code>Value</code> is a i64. Returns false …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is a u64. Returns false …\nConstruct a new <code>Serializer</code>.\nCreates a new deserializer instance for deserializing the …\nLooks up a value by a JSON Pointer.\nIf the <code>Value</code> is an Object, performs a depth-first search …\nConverts the value of <code>self</code> to an instance of Hjson\nShortcut function to encode a <code>T</code> into a Hjson <code>Value</code>\nUnwrap the <code>Serializer</code> and return the <code>Value</code>.")