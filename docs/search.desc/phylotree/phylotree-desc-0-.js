searchState.loadedDescShard("phylotree", 0, "The <code>phylotree</code> crate aims to be useful when dealing with …\nCaterpillar tree shape\nEte3 Tree.populate replicate\nShape of random trees to generate\nYule model tree shape\nCompute and manipulate phylogenetic distance matrices\nDistributions to generate branch lengths inb random trees\nReturns the argument unchanged.\nGenerates a caterpillar tree by adding children to the …\nGenereates a random binary tree of a given size.\nGenerate a random binary tree under the Yule model.\nCalls <code>U::from(self)</code>.\nBuild and manioulate phylogenetic trees.\nThere was an error when reading a distance.\nA phylogenetic distance matrix\nThe phylip file is empty\nOne of the matrix rows is empty\nWe are trying to get the pair index for the same leaf\nThere was an <code>std::io::Error</code> when writing the matrix to a …\nThere was a <code>std::io::Error</code> when reading the phylip file\nErrors that can occur when reading, writing and …\nThere was a <code>MatrixError</code> when create the distance matrix …\nWe are trying to access a distance between two taxa that …\nThere is a missing distance from one of the matrix rows\nWe are trying to access a taxon that does not exist\nThe square phylip matrix is not symmetric\nWe are trying to set a non zero distance for an identical …\nWe are trying to insert a distance that already exists in …\nErrors that can occur when parsing phylip distance matrix …\nThe size of the matrix and the number of rows do not match\nWe are trying to add a different number of taxa than what …\nWe are trying to add more taxa than we allocated space in …\nThere was a <code>std::num::ParseIntError</code> when reading the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads the matrix from a phylip file\nBuild a distance matrix from a phylip formatted string\nGet the distance between two sequences\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new distance matrix for a certain number of …\nCreate an empty distance matrix with a given size\nSet the distance between two sequences\nSet the taxa of the matrix\nNumber of taxa in the matrix\nIdentifiers of the taxa\nWrites the matrix to a phylip file\nGet the distance matrix as a HashMap containing taxa pairs …\nOutputs a matrix as a phylip formatted string\nNumber of taxa we are trying to add\nSize of the distance matrix\nTrait describing objects that can be used as branch …\nAvailable branch length distributions\nAn exponential  distribution with rate $\\lambda=0.15$\nA gamma distribution  with a shape $k=4$ and scale …\nA uniform  distribution over $[0.002, 1.0)$\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutput all supported and available fields\nOutput all branch lenghts + leaf names\nStruct to hold tree comparison metrics\nThe node with index <code>NodeId</code> could not be compressed\nThe trees we want to compare have different tips\nSome of the leaves in the tree share the same name\nA type that represents branch lengths between <code>Node</code> objects …\nThere was a <code>std::num::ParseFloatError</code> when parsing branch …\nGeneral error\nWe are trying to access the an unexisting child of the node\nWe are trying to access the parent of a parentless node\nOutput internal branch lenghts + leaf node names\nThere was a <code>std::io::Error</code> when writin the tree to a file\nThere was a <code>std::io::Error</code> when reading a newick file\nThe tree is empty and we are trying to do something that …\nThe tree is not binary and we are trying to do something …\nThe tree is not rooted and we are trying to do something …\nThe leaf index is not initialized <em>(the leaf index is used </em>…\nOutput leaf branch lenghs + all node names\nOutput leaf branch lengths + leaf node names\nThere was a <code>MatrixError</code> when extracting distance matrix\nSome branches of the tree have no length\nWe are trying to read an edge length that is missing\nNewick output format\nErrors that can occur when parsing newick files.\nThe newick string is missing a final semi-colon\nOutput all fields except for comments\nWe are trying to close a subtre but have no parent node.\nA node of the Tree\nErrors that can occur when manipulating <code>Node</code> structs.\nThere was a <code>NodeError</code> when operating on a node\nA type that represents Identifiers of <code>Node</code> objects within …\nThe requested node with index <code>NodeId</code> does not exist in the …\nOutput branch lengths\nOutput node names\nNo root node was found in the tree and we are trying to do …\nOnly output topology\nA Phylogenetic tree\nErrors that can occur when reading, writing and …\nThere was a <code>TreeError</code> when building a tree fromthe newick …\nThere is an unclosed bracket in the newick String\nSome of the leaves in the tree have no name\nThere is whitespace in one of the branch lengths\nAdd a new node to the tree.\nAdds a child to the node\nAdd a child to one of the tree’s nodes.\nKhuner Felsenstein Branch Score\nComputes the number of cherries in a tree\nIndices of child nodes\nComputes the Colless index for the tree. The colless …\nComputes the normalized colless statistic with a PDA null …\nComputes the normalized colless statistic with a Yule null …\nOptional comment attached to node\nCompare sets of branches between 2 trees. This will return …\nCompute several the RF metric, the weighted and normalized …\nCompress the tree (i.e. remove nodes with exactly 1 parent …\nReturns the diameter of the tree (i.e. longest tip to tip …\nComputes the distance matrix of the tree.\nComputes the distance matrix of the tree, implemented in a …\nA module to draw phylogenetic trees A module to draw …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a tree from a newick file\nRead a newick formatted string and build a <code>Tree</code> struct …\nGet a reference to a specific Node of the tree\nGet a reference to a node in the tree by name. Note that …\nGet a mutable reference to a node in the tree by name\nGet the Edge between node and a child\nGets the most recent common ancestor between two tree nodes\nGets the depth of the node\nGets the node ids of all the nodes in the subtree rooted …\nGets the distance between 2 nodes, returns the sum of …\nReturns a <code>Vec</code> containing the Names of the leaf nodes of …\nReturns a <code>Vec</code> containing the Node IDs of leaf nodes of the …\nGet a mutable reference to a specific Node of the tree\nGet all partitions of a tree\nReturns the path from the node to the root\nGets the root node. In the case of unrooted trees this …\nGets the node ids of all the nodes in the subtree rooted …\nGets the node ids of all the leaves in the subtree rooted …\nChecks if all the tips have unique names (This check …\nReturns the height of the tree (i.e. the number of edges …\nIndex of the node\nReturns a vector containing node ids in the same order as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the tree is Binary\nCheck if the node is a root node\nChecks if the tree is rooted (i.e. the root node exists …\nCheck if the node is a tip node\nComputes the khuner felsenstein branch score between two …\nSort children of a node by number of descendants\nReturns the lenght of the trees (i.e. the sum of branch …\nReturns a vector containing node ids in the same order as …\nReturns the number of leaves in the tree\nName of the node\nCreates a new Node\nCreate a new empty Tree object\nCreates a new named Node\nNormalized Robinson Foulds\nIndex of the parent node\nlength of branch between parent and node\nReturns a vector containing node ids in the same order as …\nReturns a vector containing node ids in the same order as …\nPrint the tree to the console\nPrint a debug view of the tree to the console\nPrune the subtree starting at a given root node.\nRemoves the child from the node\nRescale the branch lenghts of the tree\nResets the caches used when computing bipartitions <em>(i.e. </em>…\nRandomly resolve multifurcations to binarize the tree\nRobinson Foulds metric\nComputes the Robinson Foulds distance (Robinson &amp; Foulds, …\nComputes the normalized Robinson Foulds distance between …\nComputes the Sackin index. The Sackin index, $I_s$, is …\nComputes the normalized sackin statistic with a PDA null …\nComputes the normalized Sackin index with a Yule null …\nSearch nodes in the tree with a closure.\nSets the Edge between a node and its child\nSets the depth of the node\nSets the internal Node id\nSets the internal Node name\nSet the parent node See <code>add_child</code> for example usage\nReturns the number of nodes in the tree\nWrites the tree to a newick file\nWrites the tree as a newick formatted string with a …\nReturns String with node in newick format\nWrites the tree as a newick formatted string\nWeighted Robinson Foulds\nComputes the weighted Robinson Foulds distance between two …\nId of the inexistant child node\nId of the inexistant child node\nId of the parent the parent node\nId of the parent the parent node\nRepresents a branch in a visualization as a line between 2 …\nRepresents the whole layout of a visualized tree\nRepresents a node in a visualization as a point and a label\nBranches of the tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLabel of the node\nNodes of the tree\nReturns the radial layout of a tree according to the …\nRescale a branch by applying a multiplicative factor to it…\nRescale a node position by applying a multiplicative …\nRescale a Layout by applying a multiplicative factor\nX coordinate of the node\nX coordinate of the end of the branch\nX coordinate of the start of the branch\nY coordinate of the node\nY coordinate of the end of the branch\nY coordinate of the start of the branch")