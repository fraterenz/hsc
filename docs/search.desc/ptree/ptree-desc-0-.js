searchState.loadedDescShard("ptree", 0, "Pretty-print tree-like structures\nContains the <code>TreeBuilder</code> structure, useful for manually …\nImplementation of <code>TreeItem</code> for <code>petgraph::Graph</code>\nContains the <code>TreeItem</code> trait\nFunctions for printing trees to standard output or to …\nStructures to control the output formatting\nStructures to control terminal colors and styles\nImplementation of <code>TreeItem</code> for <code>serde_value::Value</code>, …\nA builder for a tree of <code>StringItem</code>s\nAdd an empty child (leaf item) to the current item\nAdd a child to the current item and make the new child …\nFinish building the tree and return the top level item\nFinish adding children, and make the current item’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStart building a tree\nPrint <code>graph</code>, starting at node <code>start</code>, to standard output …\nWrite <code>graph</code>, starting at node <code>start</code>, to writer <code>f</code> using …\nThe type of this item’s child items\nA simple concrete implementation of <code>TreeItem</code> using <code>String</code>s\nMain trait for exposing a tree structure to <code>ptree</code>\nRetrieve a list of this item’s children\nThe list of item’s children\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe item’s own text, to be returned by <code>write_self</code>\nWrite the item’s own contents (without children) to <code>f</code>\nPrint the tree <code>item</code> to standard output using default …\nPrint the tree <code>item</code> to standard output using custom …\nWrite the tree <code>item</code> to writer <code>f</code> using default formatting\nWrite the tree <code>item</code> to writer <code>f</code> using custom formatting\nASCII indentation characters, using a plus (<code>+</code>) for turning …\nASCII indentation characters, using a tick (```) for …\nAlways style output\nSet of characters use to draw indentation lines (branches)\nNever style output\nEnumeration of output kinds\nStructure controlling the print output formatting\nSet of characters use to draw indentation lines (branches)\nThe program’s standard output\nConfiguration option controlling when output styling is …\nStyle output only when printing to a TTY\nUTF-8 indentation characters, using regular box-drawing …\nUTF-8 indentation characters, using heavy box-drawing …\nUTF-8 indentation characters, using dashed box-drawing …\nUTF-8 indentation characters, using double box-drawing …\nThe actual output is not known\nANSI style used for printing the indentation lines (“…\nCharacters used to print indentation lines or “branches…\nMaximum recursion depth when printing\nCharacter for pointing straight down (<code>|</code>).\nCharacter for pointing straight down (<code>|</code>).\nCharacter for pointing down and right (<code>├</code>).\nCharacter for pointing down and right (<code>├</code>).\nEmpty character (<code> </code>).\nEmpty character (<code> </code>).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad print configuration from a configuration file or …\nIndentation size. The default value is 3.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nANSI style used for printing the item text (“leaves”)\nPadding size. The default value is 1.\nFormats <code>input</code> according to the branch style\nFormats <code>input</code> according to the leaf style\nCharacter for pointing right (<code>─</code>).\nCharacter for pointing right (<code>─</code>).\nChecks if output to a writer should be styled\nControl when output is styled.\nCharacter for turning from down to right (<code>└</code>).\nCharacter for turning from down to right (<code>└</code>).\nColor #0 (foreground code <code>30</code>, background code <code>40</code>).\nColor #4 (foreground code <code>34</code>, background code <code>44</code>).\nA colour is one specific type of ANSI escape code, and can …\nColor #6 (foreground code <code>36</code>, background code <code>46</code>).\nA colour number from 0 to 255, for use in 256-colour …\nColor #2 (foreground code <code>32</code>, background code <code>42</code>).\nA named color, as supported by <code>tint</code>.\nColor #5 (foreground code <code>35</code>, background code <code>45</code>).\nA 24-bit RGB color, as specified by ISO-8613-3.\nColor #1 (foreground code <code>31</code>, background code <code>41</code>).\nTerminal output style\nColor #7 (foreground code <code>37</code>, background code <code>47</code>).\nColor #3 (foreground code <code>33</code>, background code <code>43</code>).\nThe style’s background colour, if it has one.\nWhether this style is blinking.\nWhether this style is bold.\nWhether this style is dimmed.\nThe style’s foreground colour, if it has one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this style is hidden.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this style is italic.\nPaints <code>input</code> according to this style.\nWhether this style has reverse colours.\nWhether this style is struckthrough.\nWhether this style is underlined.")