searchState.loadedDescShard("utf8_read", 0, "UTF8 reader\nChar represents a unicode character, insufficient data, or …\nChar indicates a char of a valid Unicode codepoint decoded …\nEof indicates end of stream/file reached; once a reader …\nContains the error value\nError represents an error from the UTF-8 character reader, …\nAn IoError is passed through from the underlying read …\nA MalformedUtf8 error occurs when a byte stream contains …\nNoData indicates that the stream/file did not supply data, …\nContains the success value\nThe Reader provides a stream of characters by UTF-8 …\nThe Result type is a result with an error type of …\nThis representes the position of a character within a UTF8 …\nBorrow the underlying stream\nBorrow the data held in the Reader’s buffer.\nBorrow the underlying stream as a mutable reference\nBorrow the stream position of the next character to be …\nReturns true if the internal buffer is empty\nFind the byte that the StreamPosition holds\nFinish with the stream, returning the buffer handle, the …\nDrop the unconsumed data, for example after it has been …\nGet the current eof indicator value.\nDisplay the character as either the character itself, or …\nDisplay the <code>Error</code> in a human-readable form\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the line number and character within the line of the …\nCreate an error for a malformed UTF8 decoding within a …\nReturns a new UTF-8 character Reader, with a stream …\nConstructs a new StreamPosition for the default of byte 0, …\nReturn the next character from the stream, if one is …\nConstruct a new StreamPosition from byte, line and …\nSet the eof indicator as required; when <code>true</code> this will halt\nBuild pattern function to set the <code>eof_on_no_data</code> on the …\nSet the current stream position")