var searchIndex = JSON.parse('{\
"hsc":{"doc":"Simulate the dynamics of a stem cell population undergoing …","t":"RAAAAFDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDDDDDNDENLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLMMLMMLLLLLLLLLLLLLLLLLLLLLMLLLMMMMLMMMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLDFLLLLLLLLLLMFLLLLLMLLGDENNNDDDLFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLMLLLLLLLMLLLLLFLFLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMM","n":["MAX_SUBCLONES","genotype","process","stemcell","subclone","write2file","MutationalBurden","NeutralMutationPoisson","Sfs","Variant","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","fmt","from","from","from","from_cells","from_cells","into","into","into","new","new_muts_background","new_muts_upon_division","save","save","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Burden","CellDivisionProbabilities","Exponential","Moran","ProcessOptions","SavingOptions","Sfs","Snapshot","Stats2Save","VariantFraction","advance_step","advance_step","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cells2sample","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","counter_divisions","counter_divisions","default","distributions","distributions","eq","filename","filename","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","lambda_poisson","make_path","new","new","p","p_asymmetric","path","path2dir","save","save_sfs_only","save_sfs_only","snapshots","snapshots","subclones","subclones","switch_to_moran","time","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_state","update_state","verbosity","verbosity","vzip","vzip","vzip","vzip","vzip","vzip","vzip","StemCell","assign_background_mutations","borrow","borrow_mut","burden","clone","clone_into","default","fmt","from","has_mutations","into","last_division_t","mutate","new","to_owned","try_from","try_into","type_id","variants","vzip","with_mutations","CloneId","Distributions","Fitness","Fixed","GammaSampled","Neutral","SubClone","SubClones","Variants","acquire_p_mutation","assign","assign_cell","bern","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell_count","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_tot_cells","default","default","empty_with_id","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_mean_std_to_shape_scale","get_cells","get_cells","get_cells_subclones_idx","get_cells_subsampled","get_cells_subsampled_with_clones_idx","get_cells_with_clones_idx","get_clone","get_mean_std","get_mut_cells","get_mut_cells","get_mut_clone_unchecked","get_neutral_clone","gillespie_rates","gillespie_set_of_reactions","id","into","into","into","into","into","into_iter","is_empty","neutral_poisson","new","new","new","new_empty","next","proliferating_cell","random_cell","save_variant_fraction","the_only_one_subclone_present","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","u","variant_counts","variant_fractions","vzip","vzip","vzip","vzip","vzip","with_capacity","with_capacity","s","scale","shape"],"q":[[0,"hsc"],[6,"hsc::genotype"],[46,"hsc::process"],[170,"hsc::stemcell"],[192,"hsc::subclone"],[300,"hsc::subclone::Fitness"],[303,"std::path"],[304,"core::option"],[305,"anyhow"],[306,"core::fmt"],[307,"core::fmt"],[308,"rand::rng"],[309,"core::result"],[310,"core::any"],[311,"sosa"],[312,"core::hash"],[313,"std::path"]],"d":["Maximal number of fit clones that can arise during the …","The neutral mutations representing the genotype of the …","The events to simulate for this Markov process.","The agents whose state defines the system simulated by the …","The classes defining the proliferative advantage.","Write vector of float into new file with a precision of 6 …","Single-cell mutational burden is a mapping of cells …","The Poisson probability distribution modeling the …","Site frequency spectrum implemented as mapping with keys …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Compute the SFS from the stem cell population.","Compute the single-cell mutational burden from the stem …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create two Poisson distributions, one modelling the neutral","The number of neutral mutations acquired upon cell …","Generate neutral mutations acquired upon cell division …","","","","","","","","","","","","","","","","","","Exponential growing process","The Moran process saves the state of the agents and …","","","","","","","Update the process by simulating the next proliferative …","Update the process by simulating the next proliferative …","","","","","","","","","","","","","","","The number of cells to subsample","","","","","","","","","","","","","The counter for the number of proliferative events.","The counter for the number of proliferative events.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Rate of neutral mutations per cell-division","","","A Moran process with wild-type subclone with neutral …","Probability of getting a fit mutant upon cell division","","","","","","","","","A collection of clones having a proliferative advantage.","A collection of clones having a proliferative advantage.","","The time at which we subsample","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Hematopoietic stem and progenitor cells (HSPCs) are a rare …","Assign background mutations to all cells in the system …","","","","","","Creates a stem cell without any neutral mutations.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","the last time at which the cell has divided","","Construct a new cell without any neutral mutations.","","","","","","","","Id of the <code>SubClone</code>s.","Distribution probabilities for the simulations upon cell …","Fitness models implemented so far.","According to the <code>Fixed</code> fitness model, the birth-rates for …","According to the <code>GammaSampled</code> fitness model, the …","According to the <code>Neutral</code> fitness model, all subclones have …","A group of cells sharing the same genetic background with …","A collection of subclones each having their proliferative …","Number of cells in subclones.","","Assign <code>cell</code> to a subclone.","","probability of fit mutations upon cell proliferation","","","","","","","","","","","","","","","","","","","","","","Create new subclones each having one cell (this creates …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Create the Gillespie reaction rates according to the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns all the newly initiated subclones by assigning all …","","","Determine which cells will proliferate by randomly …","","","returns <code>None</code> if more than one subclone is present else the …","","","","","","","","","","","","","","","","","","","","","The total variant count is the number of cells in all …","The proportion of cells in all subclones.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,14,15,9,14,15,9,9,9,9,9,14,15,9,14,15,14,15,9,9,9,9,14,15,9,14,15,9,14,15,9,14,15,9,14,15,9,29,0,0,0,0,0,29,0,0,29,22,24,25,26,27,29,28,22,24,25,26,27,29,28,22,24,25,25,26,27,28,22,24,25,26,27,28,22,24,22,24,24,22,24,29,26,24,25,26,27,28,22,24,25,26,27,29,28,22,24,29,25,26,27,29,28,22,24,28,24,22,24,28,28,27,24,24,26,24,27,24,22,24,22,25,24,25,26,27,28,22,24,25,26,27,29,28,22,24,25,26,27,29,28,22,24,25,26,27,29,28,22,24,22,24,22,24,25,26,27,29,28,22,24,0,0,12,12,12,12,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,0,0,0,39,39,39,0,0,0,34,0,37,34,43,34,39,37,33,43,34,39,37,33,37,34,39,37,33,34,39,37,33,33,34,33,37,34,39,37,33,43,34,39,37,33,33,0,37,33,37,33,33,33,33,39,37,33,33,33,33,33,37,43,34,39,37,33,37,37,34,34,37,33,33,37,0,37,0,33,34,39,37,33,43,34,39,37,33,43,34,39,37,33,43,34,39,37,33,34,43,43,43,34,39,37,33,37,33,44,45,45],"f":[0,0,0,0,0,[[[1,[-1]],2,[4,[3]],5],[[7,[6]]],8],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[[-1,-2],6,[],[]],[[],9],[[9,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[12]],13],[[7,[14]]]],[[[1,[12]],13],[[7,[15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[16,16],[[7,[9]]]],[[9,16,-1,13],[[4,[[18,[17]]]]],19],[[9,-1],[[4,[[18,[17]]]]],19],[[14,2],[[7,[6]]]],[[15,2],[[7,[6]]]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[22,23,-1],6,19],[[24,23,-1],6,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[25,25],[26,26],[27,27],[28,28],[22,22],[24,24],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,[[],24],0,0,[[29,29],5],0,0,[[25,10],11],[[26,10],11],[[27,10],11],[[28,10],11],[[22,10],11],[[24,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[29,-1],6,30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[24,29,31,16],[[7,[32]]]],[[33,34,13],22],[[27,33,16,26,34,13],24],0,0,0,0,[[24,16,31,5,-1],[[7,[6]]],19],0,0,0,0,0,0,[[22,27,34,32,5],24],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[22,35],6],[[24,35],6],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[12,16,9,-1,13],6,19],[-1,-2,[],[]],[-1,-2,[],[]],[12,31],[12,12],[[-1,-2],6,[],[]],[[],12],[[12,10],11],[-1,-1,[]],[12,5],[-1,-2,[],[]],0,[[12,[18,[17]]],6],[[],12],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],0,[-1,-2,[],[]],[[[18,[17]]],12],0,0,0,0,0,0,0,0,0,[[34,-1],5,19],[[33,36,12,34,-1,13],6,19],[[37,12],6],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,38],[34,34],[39,39],[37,37],[33,33],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[33,38],[[],34],[[],33],[31,37],[[34,10],11],[[39,10],11],[[37,10],11],[[33,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[18,[[6,[12,31]]]]],33],[-1,-1,[]],[[16,16],[[6,[16,16]]]],[37,[[1,[12]]]],[33,[[18,[12]]]],[37,[[18,[[6,[12,31]]]]]],[[33,31,-1],[[18,[12]]],19],[[33,31,-1],[[18,[[6,[12,31]]]]],19],[33,[[18,[[6,[12,31]]]]]],[[33,31],[[4,[37]]]],[39,[[6,[16,16]]]],[37,[[1,[12]]]],[33,[[18,[12]]]],[[33,31],37],[33,37],[[33,39,16,-1],40,19],[33,[[41,[36]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,5],0,[[42,16,16,13],34],[[36,31],37],[[[18,[12]],31],33],[[],33],[37,4],[[33,36,13,-1],12,19],[[37,-1],[[7,[12]]],19],[[33,2,13],[[7,[6]]]],[33,[[4,[36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,[33,[[41,[38]]]],[33,[[18,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[31,31],37],[31,33],0,0,0],"c":[],"p":[[15,"slice"],[3,"Path",303],[15,"str"],[4,"Option",304],[15,"bool"],[15,"tuple"],[6,"Result",305],[8,"Display",306],[3,"NeutralMutationPoisson",6],[3,"Formatter",306],[6,"Result",306],[3,"StemCell",170],[15,"u8"],[3,"Sfs",6],[3,"MutationalBurden",6],[15,"f32"],[6,"Variant",6],[3,"Vec",307],[8,"Rng",308],[4,"Result",309],[3,"TypeId",310],[3,"Exponential",46],[3,"NextReaction",311],[3,"Moran",46],[3,"Snapshot",46],[3,"SavingOptions",46],[3,"ProcessOptions",46],[3,"CellDivisionProbabilities",46],[4,"Stats2Save",46],[8,"Hasher",312],[15,"usize"],[3,"PathBuf",303],[3,"SubClones",192],[3,"Distributions",192],[3,"CurrentState",311],[6,"CloneId",192],[3,"SubClone",192],[15,"u64"],[4,"Fitness",192],[3,"ReactionRates",311],[15,"array"],[15,"f64"],[3,"Variants",192],[13,"Fixed",300],[13,"GammaSampled",300]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
